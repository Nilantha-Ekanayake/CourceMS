// <auto-generated />
using System;
using Cource.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseMS.Migrations
{
    [DbContext(typeof(AcademicDBContext))]
    [Migration("20221203053457_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AcademicCourceLecturer", b =>
                {
                    b.Property<int>("AcademicCourcesId")
                        .HasColumnType("int");

                    b.Property<int>("LecturersId")
                        .HasColumnType("int");

                    b.HasKey("AcademicCourcesId", "LecturersId");

                    b.HasIndex("LecturersId");

                    b.ToTable("AcademicCourceLecturer");
                });

            modelBuilder.Entity("AcademicCourceStudent", b =>
                {
                    b.Property<int>("AcademicCourceId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("AcademicCourceId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("AcademicCourceStudent");
                });

            modelBuilder.Entity("Cource.Domain.AcademicCource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfTeachingHours")
                        .HasColumnType("int");

                    b.Property<int>("NoOfTutorailHours")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("academicCource");
                });

            modelBuilder.Entity("Cource.Domain.AcademicCourceOutLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CourceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourceId");

                    b.ToTable("academicCourceOutLine");
                });

            modelBuilder.Entity("Cource.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Cource.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Cource.Domain.Lecturer", b =>
                {
                    b.HasBaseType("Cource.Domain.Person");

                    b.Property<int>("Designation")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Lecturer");
                });

            modelBuilder.Entity("Cource.Domain.Student", b =>
                {
                    b.HasBaseType("Cource.Domain.Person");

                    b.Property<DateTime>("EnrolledDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInternational")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("AcademicCourceLecturer", b =>
                {
                    b.HasOne("Cource.Domain.AcademicCource", null)
                        .WithMany()
                        .HasForeignKey("AcademicCourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cource.Domain.Lecturer", null)
                        .WithMany()
                        .HasForeignKey("LecturersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcademicCourceStudent", b =>
                {
                    b.HasOne("Cource.Domain.AcademicCource", null)
                        .WithMany()
                        .HasForeignKey("AcademicCourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cource.Domain.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cource.Domain.AcademicCourceOutLine", b =>
                {
                    b.HasOne("Cource.Domain.AcademicCource", "Cource")
                        .WithMany("AcademicCourceOutLines")
                        .HasForeignKey("CourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cource");
                });

            modelBuilder.Entity("Cource.Domain.Person", b =>
                {
                    b.HasOne("Cource.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Cource.Domain.AcademicCource", b =>
                {
                    b.Navigation("AcademicCourceOutLines");
                });
#pragma warning restore 612, 618
        }
    }
}
